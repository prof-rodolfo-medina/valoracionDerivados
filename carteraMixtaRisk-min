# Optimización de Carteras con Python
# Implementación práctica de la Teoría de Carteras Mixtas
# Universidad Internacional de La Rioja

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import seaborn as sns

# Configuración de visualización
plt.style.use('seaborn-v0_8-darkgrid')  # Para versiones recientes de matplotlib
plt.rcParams['figure.figsize'] = (12, 6)
plt.rcParams['font.size'] = 12
sns.set_palette('viridis')

# Funciones básicas para cálculo de carteras
def portfolio_return(weights, returns):
    """Calcula el rendimiento esperado de una cartera"""
    return np.sum(weights * returns)

def portfolio_volatility(weights, cov_matrix):
    """Calcula la volatilidad (desviación estándar) de una cartera"""
    return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

def sharpe_ratio(weights, returns, cov_matrix, risk_free_rate):
    """Calcula el ratio de Sharpe de una cartera"""
    p_ret = portfolio_return(weights, returns)
    p_vol = portfolio_volatility(weights, cov_matrix)
    return (p_ret - risk_free_rate) / p_vol

def negative_sharpe(weights, returns, cov_matrix, risk_free_rate):
    """Función objetivo para minimización (negativo del ratio de Sharpe)"""
    return -sharpe_ratio(weights, returns, cov_matrix, risk_free_rate)

def optimize_tangent_portfolio(returns, cov_matrix, risk_free_rate):
    """Encuentra la cartera tangente (máximo Sharpe ratio)"""
    num_assets = len(returns)
    args = (returns, cov_matrix, risk_free_rate)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bounds = tuple((0, 1) for asset in range(num_assets))
    
    initial_guess = np.array([1/num_assets] * num_assets)
    
    result = minimize(negative_sharpe, 
                     initial_guess, 
                     args=args, 
                     method='SLSQP', 
                     bounds=bounds, 
                     constraints=constraints)
    
    return result['x']

# Datos de ejemplo - Activos ficticios
# Rendimientos esperados anuales
returns = np.array([0.10, 0.15, 0.12, 0.08])

# Matriz de covarianza
cov_matrix = np.array([
    [0.040, 0.018, 0.015, 0.010],
    [0.018, 0.090, 0.020, 0.012],
    [0.015, 0.020, 0.060, 0.008],
    [0.010, 0.012, 0.008, 0.030]
])

# Tasa libre de riesgo
risk_free_rate = 0.03

# Ejemplo: Cálculo de una cartera equitativa
equal_weights = np.array([0.25, 0.25, 0.25, 0.25])
equal_ret = portfolio_return(equal_weights, returns)
equal_vol = portfolio_volatility(equal_weights, cov_matrix)
equal_sharpe = sharpe_ratio(equal_weights, returns, cov_matrix, risk_free_rate)

print("Cartera equitativa:")
print(f"Rendimiento esperado: {equal_ret:.4f}")
print(f"Volatilidad: {equal_vol:.4f}")
print(f"Ratio de Sharpe: {equal_sharpe:.4f}")
print("-" * 50)

# Generación de la frontera eficiente
num_portfolios = 10000
results = np.zeros((3, num_portfolios))
weights_record = []

for i in range(num_portfolios):
    weights = np.random.random(len(returns))
    weights /= np.sum(weights)  # Normalizar a suma 1
    weights_record.append(weights)
    
    # Calcular métricas
    portfolio_ret = portfolio_return(weights, returns)
    portfolio_vol = portfolio_volatility(weights, cov_matrix)
    portfolio_sharpe = (portfolio_ret - risk_free_rate) / portfolio_vol
    
    # Guardar resultados
    results[0,i] = portfolio_vol
    results[1,i] = portfolio_ret
    results[2,i] = portfolio_sharpe

# Visualización de la frontera eficiente
plt.figure(figsize=(12, 8))
plt.scatter(results[0,:], results[1,:], c=results[2,:], 
          cmap='viridis', marker='o', s=10, alpha=0.3)

plt.colorbar(label='Ratio de Sharpe')
plt.xlabel('Volatilidad (Desviación Estándar)')
plt.ylabel('Rendimiento Esperado')
plt.title('Frontera Eficiente')

# Marcar el activo libre de riesgo
plt.scatter(0, risk_free_rate, c='red', marker='o', s=200)

plt.grid(True)
plt.savefig('frontera_eficiente.png', dpi=300)
plt.show()

# Encontrar la cartera tangente
tangent_weights = optimize_tangent_portfolio(returns, cov_matrix, risk_free_rate)
tangent_ret = portfolio_return(tangent_weights, returns)
tangent_vol = portfolio_volatility(tangent_weights, cov_matrix)
tangent_sharpe = sharpe_ratio(tangent_weights, returns, cov_matrix, risk_free_rate)

print("Pesos de la cartera tangente:")
for i, w in enumerate(tangent_weights):
    print(f"Activo {i+1}: {w:.4f}")
print(f"\nRendimiento esperado: {tangent_ret:.4f}")
print(f"Volatilidad: {tangent_vol:.4f}")
print(f"Ratio de Sharpe: {tangent_sharpe:.4f}")
print("-" * 50)

# Visualización de la CML
plt.figure(figsize=(12, 8))
plt.scatter(results[0,:], results[1,:], c=results[2,:], 
          cmap='viridis', marker='o', s=10, alpha=0.3)

# Marcar la cartera tangente
plt.scatter(tangent_vol, tangent_ret, c='red', marker='*', s=300, label='Cartera Tangente')

# Marcar el activo libre de riesgo
plt.scatter(0, risk_free_rate, c='red', marker='o', s=200, label='Activo Libre de Riesgo')

# Dibujar la CML
max_vol = np.max(results[0,:]) * 1.2
plt.plot([0, max_vol], [risk_free_rate, risk_free_rate + 
                        (tangent_ret - risk_free_rate) * max_vol / tangent_vol], 
        'r--', linewidth=2, label='CML')

plt.colorbar(label='Ratio de Sharpe')
plt.xlabel('Volatilidad (Desviación Estándar)')
plt.ylabel('Rendimiento Esperado')
plt.title('Frontera Eficiente y Línea del Mercado de Capitales')
plt.legend()
plt.grid(True)
plt.savefig('cml_frontera.png', dpi=300)
plt.show()

# Función para carteras mixtas
def get_mixed_portfolio(tangent_weights, risk_free_rate, returns, cov_matrix, risk_aversion):
    """
    Construye una cartera mixta entre el activo libre de riesgo 
    y la cartera tangente según el nivel de aversión al riesgo
    
    risk_aversion: 0 (solo activo libre de riesgo) a
                   1 (solo cartera tangente) a
                   >1 (apalancamiento)
    """
    # Rendimiento y volatilidad de la cartera tangente
    tangent_ret = portfolio_return(tangent_weights, returns)
    tangent_vol = portfolio_volatility(tangent_weights, cov_matrix)
    
    # Pesos de la cartera mixta
    w_tangent = risk_aversion
    w_rf = 1 - risk_aversion
    
    # Métricas de la cartera mixta
    mixed_ret = w_rf * risk_free_rate + w_tangent * tangent_ret
    mixed_vol = w_tangent * tangent_vol
    mixed_sharpe = (mixed_ret - risk_free_rate) / mixed_vol if mixed_vol > 0 else 0
    
    return {
        'w_tangent': w_tangent,
        'w_rf': w_rf,
        'return': mixed_ret,
        'volatility': mixed_vol,
        'sharpe': mixed_sharpe
    }

# Generar carteras mixtas con diferentes niveles de aversión al riesgo
risk_levels = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5]
mixed_portfolios = []

for risk in risk_levels:
    portfolio = get_mixed_portfolio(tangent_weights, risk_free_rate, 
                                  returns, cov_matrix, risk)
    mixed_portfolios.append(portfolio)
    
# Mostrar resultados en una tabla
print("Análisis de Carteras Mixtas:")
print("Risk Level | RF Weight | Tangent Weight | Return | Volatility | Sharpe")
print("-" * 75)

for i, risk in enumerate(risk_levels):
    p = mixed_portfolios[i]
    print(f"{risk:9.2f} | {p['w_rf']:9.2f} | {p['w_tangent']:14.2f} | " + 
          f"{p['return']*100:6.2f}% | {p['volatility']*100:10.2f}% | {p['sharpe']:5.3f}")
print("-" * 50)

# Visualización de carteras mixtas en la CML
plt.figure(figsize=(12, 8))

# Graficar la frontera eficiente
plt.scatter(results[0,:], results[1,:], c=results[2,:], 
          cmap='viridis', marker='o', s=10, alpha=0.1)

# Marcar la cartera tangente
plt.scatter(tangent_vol, tangent_ret, c='red', marker='*', s=300, label='Cartera Tangente')

# Marcar el activo libre de riesgo
plt.scatter(0, risk_free_rate, c='red', marker='o', s=200, label='Activo Libre de Riesgo')

# Dibujar la CML
plt.plot([0, max_vol], [risk_free_rate, risk_free_rate + 
                        (tangent_ret - risk_free_rate) * max_vol / tangent_vol], 
        'r--', linewidth=2, label='CML')

# Marcar las carteras mixtas
for i, risk in enumerate(risk_levels):
    p = mixed_portfolios[i]
    label = f"Cartera mixta {risk}" if i == 0 or i == len(risk_levels)-1 else ""
    plt.scatter(p['volatility'], p['return'], c='green', marker='D', s=100, label=label if label else "")

plt.colorbar(label='Ratio de Sharpe')
plt.xlabel('Volatilidad (Desviación Estándar)')
plt.ylabel('Rendimiento Esperado')
plt.title('Carteras Mixtas en la Línea del Mercado de Capitales')
plt.legend()
plt.grid(True)
plt.savefig('carteras_mixtas.png', dpi=300)
plt.show()

# Optimización con restricciones adicionales
def optimize_portfolio_with_constraints(returns, cov_matrix, risk_free_rate, max_weight=0.3):
    """Encuentra la cartera con restricciones adicionales"""
    num_assets = len(returns)
    args = (returns, cov_matrix, risk_free_rate)
    
    # Restricciones
    constraints = [
        {'type': 'eq', 'fun': lambda x: np.sum(x) - 1},  # Suma = 1
    ]
    
    # Límites: ningún activo puede superar max_weight
    bounds = tuple((0, max_weight) for asset in range(num_assets))
    
    initial_guess = np.array([1/num_assets] * num_assets)
    
    result = minimize(negative_sharpe, 
                     initial_guess, 
                     args=args, 
                     method='SLSQP', 
                     bounds=bounds, 
                     constraints=constraints)
    
    return result['x']

# Cartera tangente con restricción del 30%
constrained_tangent = optimize_portfolio_with_constraints(returns, cov_matrix, risk_free_rate, 0.3)
constrained_ret = portfolio_return(constrained_tangent, returns)
constrained_vol = portfolio_volatility(constrained_tangent, cov_matrix)
constrained_sharpe = sharpe_ratio(constrained_tangent, returns, cov_matrix, risk_free_rate)

print("Pesos de la cartera tangente con restricción del 30%:")
for i, w in enumerate(constrained_tangent):
    print(f"Activo {i+1}: {w:.4f}")
print(f"\nRendimiento esperado: {constrained_ret:.4f}")
print(f"Volatilidad: {constrained_vol:.4f}")
print(f"Ratio de Sharpe: {constrained_sharpe:.4f}")
print("-" * 50)

# Cartera con volatilidad objetivo
def minimize_variance(weights, cov_matrix):
    """Función objetivo para minimizar la varianza"""
    return portfolio_volatility(weights, cov_matrix)**2

def optimize_min_variance_target_return(returns, cov_matrix, target_return):
    """
    Optimiza una cartera para mínima varianza con un
    rendimiento objetivo (para un punto específico de la frontera)
    """
    num_assets = len(returns)
    args = (cov_matrix)
    
    constraints = [
        {'type': 'eq', 'fun': lambda x: np.sum(x) - 1},  # Suma = 1
        {'type': 'eq', 'fun': lambda x: portfolio_return(x, returns) - target_return}
    ]
    
    bounds = tuple((0, 1) for asset in range(num_assets))
    initial_guess = np.array([1/num_assets] * num_assets)
    
    result = minimize(minimize_variance, 
                     initial_guess, 
                     args=(cov_matrix), 
                     method='SLSQP', 
                     bounds=bounds, 
                     constraints=constraints)
    
    return result['x']

# Encontrar una cartera con rendimiento objetivo
target_return = 0.11  # 11%
target_weights = optimize_min_variance_target_return(returns, cov_matrix, target_return)
target_vol = portfolio_volatility(target_weights, cov_matrix)
target_sharpe = sharpe_ratio(target_weights, returns, cov_matrix, risk_free_rate)

print(f"Pesos de la cartera con rendimiento objetivo de {target_return*100}%:")
for i, w in enumerate(target_weights):
    print(f"Activo {i+1}: {w:.4f}")
print(f"\nVolatilidad: {target_vol:.4f}")
print(f"Ratio de Sharpe: {target_sharpe:.4f}")
print("-" * 50)
